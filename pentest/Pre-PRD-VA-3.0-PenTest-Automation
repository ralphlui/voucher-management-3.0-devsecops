pipeline {
    agent any
    environment {
        EXCLUDE_APP = "voucher-app-web"
        AUTH_APP = "voucher-app-auth"
        PENTEST_HOST = "https://demo.devplify.com"
        PENTEST_URL = "${PENTEST_HOST}"
        S3_BUCKET = "voucher-app-sit"
        CONFIGMAP = "my-configmap"
        SQLMAP_OUTDIR = "/tmp/sqlmap"
        XSSTRIKE_OUTDIR = "/tmp/xsstrike"
        SEED_URL = "/var/lib/jenkins/XSStrike/seed"
        ZAP_MODE = "full"
        SKIP_TESTS = "true"
    }
    stages {
        stage('Wait for Pods to be Ready for Penetration Test') {
            steps {
                script {
                    def maxRetries = 18  // Max wait time (30 * 10s = 300s)
                    def retryInterval = 10 // Seconds between checks
                    
                    // set DAST/PENTEST to true
                    sh "aws eks update-kubeconfig --name app-cluster-1 --region ap-southeast-1"
                    sh "kubectl patch configmap ${CONFIGMAP} --type merge -p '{\"data\":{\"PENTEST_ENABLE\":\"true\"}}' -n voucher-management-app"
                    sh "kubectl rollout restart deploy ${AUTH_APP} -n voucher-management-app"
                    
                    for (int i = 0; i < maxRetries; i++) {
                        def podNames = sh(
                            script: "kubectl get pods --no-headers -o custom-columns=:metadata.name -n voucher-management-app | grep -v ${EXCLUDE_APP} | grep -v ingress-nginx-controller",
                            returnStdout: true
                        ).trim().split("\n")
                        
                        def allPodsReady = true
                        
                        for (pod in podNames) {
                            def logOutput = sh(
                                script: "kubectl logs ${pod} -n voucher-management-app | grep 'Tomcat started' || true",
                                returnStdout: true
                            ).trim()

                            if (!logOutput) {
                                echo "Tomcat has NOT started yet in pod: ${pod}"
                                allPodsReady = false
                            } else {
                                echo "Tomcat started in pod: ${pod}"
                            }
                        }
                        
                        if (allPodsReady) {
                            echo "All pods are fully started!"
                            break
                        }
                        
                        if (i == maxRetries - 1) {
                            error("Timeout: Tomcat did not start in all pods within the expected time.")
                        }
                        
                        sleep retryInterval;
                    }
                }
            }
        }
        stage('Run OWASP ZAP') {
            when {
                expression { env.SKIP_TESTS != 'true' }
            }
            steps {
                echo "Running OWASP ZAP scan on ${PENTEST_URL} ..."
                script {
                    // Get current date and time in a format like "yyyyMMdd-HHmmss"
                    def currentDateTime = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    def zapReportFileName = "zap-report-${currentDateTime}.html"
                    sh """
                    sh /var/lib/jenkins/sectools/zap.sh "${PENTEST_URL}" "${ZAP_MODE}"
                    aws s3 cp /tmp/zap_report.html s3://${S3_BUCKET}/PENTEST/${zapReportFileName}
                    """
                }
            }
        }
        stage('Run SQLMAP') {
            when {
                expression { env.SKIP_TESTS != 'true' }
            }
            steps {
                echo "Running SQLMAP scan on ${PENTEST_URL} ..."
                script {
                    // Get current date and time in a format like "yyyyMMdd-HHmmss"
                    def currentDateTime = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    // Create a unique zip file name with timestamp
                    def zipFileName = "sqlmap-reports-${currentDateTime}.zip"
                    dir("${SQLMAP_OUTDIR}") {
                    sh """
                        sh /var/lib/jenkins/sectools/sqlmap.sh "${PENTEST_URL}" "${SQLMAP_OUTDIR}"
                        zip -r ${zipFileName} *.txt
                        aws s3 cp ${zipFileName} s3://${S3_BUCKET}/PENTEST/${zipFileName}
                        rm *.txt
                    """
                    }
                }
            }
        }
        stage('Run XSSTRIKE') {
            when {
                expression { env.SKIP_TESTS != 'false' }
            }
            steps {
                echo "Running XSSTRIKE scan on ${PENTEST_URL} ..."
                script {
                    // Get current date and time in a format like "yyyyMMdd-HHmmss"
                    def currentDateTime = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    // Create a unique zip file name with timestamp
                    def zipFileName = "xsstrike-reports-${currentDateTime}.zip"
                    dir("${XSSTRIKE_OUTDIR}") {
                    sh """
                        sh /var/lib/jenkins/sectools/xsstrike.sh "${PENTEST_URL}" "${SEED_URL}" "${XSSTRIKE_OUTDIR}"
                        zip -r ${zipFileName} *.txt
                        aws s3 cp ${zipFileName} s3://${S3_BUCKET}/PENTEST/${zipFileName}
                        rm *.txt
                    """
                    }
                }
            }
        }
    }
    post {
        always {
            sh """
            # set DAST/PENTEST to false
            aws eks update-kubeconfig --name app-cluster-1 --region ap-southeast-1
            kubectl patch configmap ${CONFIGMAP} --type merge -p '{\"data\":{\"PENTEST_ENABLE\":\"false\"}}' -n voucher-management-app
            kubectl rollout restart deploy ${AUTH_APP} -n voucher-management-app
            """
        }
    }
}

