pipeline {
    agent any
    environment {
        EXCLUDE_APP = "voucher-app-web"
        AUTH_APP = "voucher-app-auth"
        DAST_HOST = "https://devplify.com/"
        DAST_URL = "${DAST_HOST}"
        S3_BUCKET = "voucher-app-sit"
        CONFIGMAP = "my-configmap"
        ZAP_MODE = "base"
    }
    stages {
        stage('Wait for Pods to be Ready for DAST') {
            steps {
                script {
                    def maxRetries = 18  // Max wait time (30 * 10s = 300s)
                    def retryInterval = 10 // Seconds between checks
                    
                    //def pentestEnable = sh(script: "kubectl get configmap ${CONFIGMAP} -o jsonpath='{.data.PENTEST_ENABLE}'", returnStdout: true).trim()
                    // Check if current pentest is enabled or disabled
                    //if (pentestEnable == "true") {
                    //    echo "PENTEST_ENABLE is set to true."
                    //    return // Exits the current stage
                    //} 
                    
                    // set DAST/PENTEST to true
                    sh "kubectl patch configmap ${CONFIGMAP} --type merge -p '{\"data\":{\"PENTEST_ENABLE\":\"true\"}}'"
                    sh "kubectl rollout restart deploy ${AUTH_APP}"
                    
                    for (int i = 0; i < maxRetries; i++) {
                        def podNames = sh(
                            script: "kubectl get pods --no-headers -o custom-columns=:metadata.name | grep -v ${EXCLUDE_APP}",
                            returnStdout: true
                        ).trim().split("\n")
                        
                        def allPodsReady = true
                        
                        for (pod in podNames) {
                            def logOutput = sh(
                                script: "kubectl logs ${pod} | grep 'Tomcat started' || true",
                                returnStdout: true
                            ).trim()

                            if (!logOutput) {
                                echo "Tomcat has NOT started yet in pod: ${pod}"
                                allPodsReady = false
                            } else {
                                echo "Tomcat started in pod: ${pod}"
                            }
                        }
                        
                        if (allPodsReady) {
                            echo "All pods are fully started!"
                            break
                        }
                        
                        if (i == maxRetries - 1) {
                            error("Timeout: Tomcat did not start in all pods within the expected time.")
                        }
                        
                        sleep retryInterval;
                    }
                }
            }
        }
        stage('Run DAST') {
            steps {
                echo "Running DAST scan on ${DAST_URL} ..."
                script {
                    // Get current date and time in a format like "yyyyMMdd-HHmmss"
                    def currentDateTime = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    def zapReportFileName = "zap-report-${currentDateTime}.html"
                    sh """
                    sh /var/lib/jenkins/sectools/zap.sh "${DAST_URL}" "${ZAP_MODE}"
                    aws s3 cp /tmp/zap_report.html s3://${S3_BUCKET}/DAST/${zapReportFileName}
                    """
                }
            }
        }
    }
    post {
        always {
            sh """
            # set DAST/PENTEST to false
            kubectl patch configmap ${CONFIGMAP} --type merge -p '{\"data\":{\"PENTEST_ENABLE\":\"false\"}}'
            kubectl rollout restart deploy ${AUTH_APP}
            """
        }
    }
}

